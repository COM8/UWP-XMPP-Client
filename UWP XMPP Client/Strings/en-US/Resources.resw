<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountSettingsPage_too_many_accounts_text" xml:space="preserve">
    <value>There is currently a limit of 15 accounts.
The reason for this is:
The UWP password vault is limited to 20 passwords per App and for fail save reasons the accounts limit is 15 .

Read more:
https://docs.microsoft.com/en-us/uwp/api/windows.security.credentials.passwordvault.add#Windows_Security_Credentials_PasswordVault_Add_Windows_Security_Credentials_PasswordCredential</value>
  </data>
  <data name="error_text" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="invalid_jabber_id_text" xml:space="preserve">
    <value>Invalid Jabber-ID!</value>
  </data>
  <data name="invalid_port_text" xml:space="preserve">
    <value>Invalid server port!</value>
  </data>
  <data name="invalid_resource_text" xml:space="preserve">
    <value>Invalid resource name!</value>
  </data>
  <data name="invalid_server_text" xml:space="preserve">
    <value>Invalid server addresse!</value>
  </data>
  <data name="whats_new_markdown.Text" xml:space="preserve">
    <value># v.0.5.1.0 [May 2018#2] Bug fixes

Just a quick fix for in-App purchases and message delay stamps not getting parsed correctly.

**Please report bugs [here](https://github.com/UWPX/UWPX-Client/issues)!**

### Changes:
* Fixed in-App purchases
* Fixed message delay offset
* Fixed ban/kick message text
&lt;br/&gt;
&lt;br/&gt;
# v.0.5.0.0 [May 2018] TSL options, donations, and bug fixes:

With the May 2018 release I've added TLS options. For example you now can prohibit TLS connections or ignore certain certificate errors to allow the use of self signed certificates. TLS options can be changed via the accounts settings for the individual account.
I've also added a donations page which can be found under **"Settings" -&gt; "Donation"** so you can support the development of this App.

**Please report bugs [here](https://github.com/UWPX/UWPX-Client/issues)!**

### Known bugs:
* Background image not loading [#9](https://github.com/UWPX/UWPX-Client/issues/9)
* Remove bookmark not working [#22](https://github.com/UWPX/UWPX-Client/issues/22)
* Chat state won't update [#25](https://github.com/UWPX/UWPX-Client/issues/25)
* App crashes sometimes, if you try to delete a chat [#23](https://github.com/UWPX/UWPX-Client/issues/23)
* MUC nickname changing not working [#29](https://github.com/UWPX/UWPX-Client/issues/29) 
* Not receiving offline messages [#27](https://github.com/UWPX/UWPX-Client/issues/27) 

### Changes:
* Added options for ignoring certificate errors
* **Added a settings page for donations to keep the project running ;D**
* Added sender nicknames in MUC messages
* Added a connection certificate info dialog [WIP!]
* Added App Center crash reporting (experimental)
* Added a 15 accounts limit
* Added a content dialog for connection errors
* Fixed text dialog not showing its content
* Fixed request ban list crash
* Fixed chat and chat message time offset
* Fixed nickname changing button not getting enabled again
* Fixed host not found crash
* Fixed some logger crashes
* Fixed some content dialog crashes
* Fixed App crashes, if not connected to the internet [#14](https://github.com/UWPX/UWPX-Client/issues/14)
* Improved logger performance
* Improved the account connection reliability
* Improved account SASL error handling
* Updated the clear cache UI

### Plans for the June release:
* Start adding [Publish-Subscribe (XEP-0060)](https://xmpp.org/extensions/xep-0060.html) support [#5](https://github.com/UWPX/UWPX-Client/issues/5) 
* Fix [#27](https://github.com/UWPX/UWPX-Client/issues/27) 
* Fix more [bugs](https://github.com/UWPX/UWPX-Client/issues)


[Click to view on GitHub](https://github.com/UWPX/UWPX-Client/releases/tag/v.0.5.0.0)</value>
  </data>
</root>