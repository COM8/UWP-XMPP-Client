<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="error_text" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="invalid_jabber_id_text" xml:space="preserve">
    <value>Invalid Jabber-ID!</value>
  </data>
  <data name="invalid_port_text" xml:space="preserve">
    <value>Invalid server port!</value>
  </data>
  <data name="invalid_resource_text" xml:space="preserve">
    <value>Invalid resource name!</value>
  </data>
  <data name="invalid_server_text" xml:space="preserve">
    <value>Invalid server addresse!</value>
  </data>
  <data name="whats_new_markdown.Text" xml:space="preserve">
    <value># v.0.3.0.0 [March 2018] Performance and MUC:

This release improves the Apps performance quiet a bit. All pages should load faster and navigation between pages should be quiet smooth now.
This months release also improves the [MUC (XEP-0045)](https://xmpp.org/extensions/xep-0045.html) support. For example now you can make quiet a few changes for your MUC rooms (have a look at the screenshoots for examples).
By now the MUC support is about 90% done. It still needs quiet a bit of work that as to be done and then there are still all those MUC related bugs to fix. But my plans are to finish implementation of all MUC features this month, so I can start fixing bugs by the end march.
If you are missing a MUC feature please tell me [here](https://github.com/UWPX/UWPX-Client/issues/10) about it.
**Please report bugs [here](https://github.com/UWPX/UWPX-Client/issues)!**

### Known bugs:
* Background image not loading #9 
* Last active chat won't update #8 
* App crashes, if not connected to the internet #14 
* MUC configuration: 'list multi' are not supported #21
* MUC configuration: 'list single' field won't save #20
* Accounts don't connect from time to time #18
* MUC messages showing up on wrong side #17
* Remove bookmark not working #22

### Changes:
* Added a MUC info page
* Added swiping to manipulate chats
* Added a log-level selection control
* Added searching for chats
* Fixed MUC browsing
* Started improved account connection reliabillity (not final, still a little bit buggy from time to time)

### Plans for april:
* Finish implementation of all planed MUC features #10 
* Start adding [vcard-temp(XEP-0054)](https://xmpp.org/extensions/xep-0054.html) support
* Fix [bugs](https://github.com/UWPX/UWPX-Client/issues)

### Examples:
[Click to view on GitHub](https://github.com/UWPX/UWPX-Client/releases/tag/v.0.3.0.0)</value>
  </data>
</root>