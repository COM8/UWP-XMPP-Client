<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountSettingsPage_too_many_accounts_text" xml:space="preserve">
    <value>There is currently a limit of 15 accounts.
The reason for this is:
The UWP password vault is limited to 20 passwords per App and for fail save reasons the accounts limit is 15 .

Read more:
https://docs.microsoft.com/en-us/uwp/api/windows.security.credentials.passwordvault.add#Windows_Security_Credentials_PasswordVault_Add_Windows_Security_Credentials_PasswordCredential</value>
  </data>
  <data name="chat_details_dummy_answer_11" xml:space="preserve">
    <value>Don't you have better things to do?</value>
  </data>
  <data name="chat_details_dummy_answer_15" xml:space="preserve">
    <value>Hey! Stop texting with me!</value>
  </data>
  <data name="chat_details_dummy_answer_20" xml:space="preserve">
    <value>You really don't have better things to do...</value>
  </data>
  <data name="chat_details_dummy_answer_3" xml:space="preserve">
    <value>Do you like ducks?</value>
  </data>
  <data name="chat_details_dummy_answer_30" xml:space="preserve">
    <value>I don't hear you🙉🤬... nanananana...</value>
  </data>
  <data name="chat_details_dummy_answer_3_img" xml:space="preserve">
    <value>https://images.pexels.com/photos/226597/pexels-photo-226597.jpeg</value>
  </data>
  <data name="chat_details_dummy_answer_4" xml:space="preserve">
    <value>I hate them! 😡
They're sooooo fluffy - to fluffy!</value>
  </data>
  <data name="chat_details_dummy_answer_50_1" xml:space="preserve">
    <value>Selfdestruct initiated</value>
  </data>
  <data name="chat_details_dummy_answer_50_2" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="chat_details_dummy_answer_50_3" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="chat_details_dummy_answer_50_4" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="chat_details_dummy_answer_50_5" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="chat_details_dummy_answer_50_6" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="chat_details_dummy_answer_50_7" xml:space="preserve">
    <value>https://images.pexels.com/photos/73909/nuclear-weapons-test-nuclear-weapon-weapons-test-explosion-73909.jpeg</value>
  </data>
  <data name="chat_details_dummy_answer_7" xml:space="preserve">
    <value>Why are you writing messages to me?</value>
  </data>
  <data name="error_text" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="invalid_jabber_id_text" xml:space="preserve">
    <value>Invalid Jabber-ID!</value>
  </data>
  <data name="invalid_port_text" xml:space="preserve">
    <value>Invalid server port!</value>
  </data>
  <data name="invalid_resource_text" xml:space="preserve">
    <value>Invalid resource name!</value>
  </data>
  <data name="invalid_server_text" xml:space="preserve">
    <value>Invalid server addresse!</value>
  </data>
  <data name="whats_new_markdown.Text" xml:space="preserve">
    <value># v.0.6.0.0 [June 2018] Refactoring, UI and preparations:

This month I've finally started working on [Publish-Subscribe (XEP-0060)](https://xmpp.org/extensions/xep-0060.html), [Stream Management (XEP-1098)](https://xmpp.org/extensions/xep-0198.html) and [HTTP File Upload (XEP-0363)](https://xmpp.org/extensions/xep-0363.html). It's still far from being done but the basic messages for the server communication are done. I've also refactored the TCP and XMPP connection for better reliability, performance and better error reporting. Now if an error occurs you can, like sown in the examples, click on the error message and it will displays additional information. There's now also a TLS indicator lock, which indicates whether or whether not you are connect via a secure TLS connection with the server.
I've also added the option to switch the App theme and pick a custom chat background.
**Please report bugs [here](https://github.com/UWPX/UWPX-Client/issues)!**

### Known bugs:
* Remove bookmark not working [#22](https://github.com/UWPX/UWPX-Client/issues/22)
* Chat state won't update [#25](https://github.com/UWPX/UWPX-Client/issues/25)
* App crashes sometimes, if you try to delete a chat [#23](https://github.com/UWPX/UWPX-Client/issues/23)
* MUC nickname changing not working [#29](https://github.com/UWPX/UWPX-Client/issues/29) 
* Not receiving offline messages [#27](https://github.com/UWPX/UWPX-Client/issues/27) 

### Changes:
* Added security settings
* Added a password vault "explorer"
* Added filter button
* Added open folder button for cached images
* Added App theme changing support
* Added custom background image support [#32](https://github.com/UWPX/UWPX-Client/issues/32)
* Added certificate info
* Added connection info
* Added a TLS indicator
* Fixed send message button getting focus [#19](https://github.com/UWPX/UWPX-Client/issues/19)
* Fixed message status icon
* Fixed account color changing
* Changed account error messages to be clickable to show more information
* Switched from Hockey App to App Center crash reporting
* Refactored the TCP and XMPP handler

### Plans for the July release:
* [Publish-Subscribe (XEP-0060)](https://xmpp.org/extensions/xep-0060.html) support [#5](https://github.com/UWPX/UWPX-Client/issues/5)
* [HTTP File Upload (XEP-0363)](https://xmpp.org/extensions/xep-0363.html)
* Fix more [bugs](https://github.com/UWPX/UWPX-Client/issues)

[Click to view on GitHub](https://github.com/UWPX/UWPX-Client/releases/tag/v.0.6.0.0)</value>
  </data>
</root>