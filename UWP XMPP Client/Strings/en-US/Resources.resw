<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountSettingsPage_too_many_accounts_text" xml:space="preserve">
    <value>There is currently a limit of 15 accounts.
The reason for this is:
The UWP password vault is limited to 20 passwords per App and for fail save reasons the accounts limit is 15 .

Read more:
https://docs.microsoft.com/en-us/uwp/api/windows.security.credentials.passwordvault.add#Windows_Security_Credentials_PasswordVault_Add_Windows_Security_Credentials_PasswordCredential</value>
  </data>
  <data name="chat_details_dummy_answer_11" xml:space="preserve">
    <value>Don't you have better things to do?</value>
  </data>
  <data name="chat_details_dummy_answer_15" xml:space="preserve">
    <value>Hey! Stop texting with me!</value>
  </data>
  <data name="chat_details_dummy_answer_20" xml:space="preserve">
    <value>You really don't have better things to do...</value>
  </data>
  <data name="chat_details_dummy_answer_3" xml:space="preserve">
    <value>Do you like ducks?</value>
  </data>
  <data name="chat_details_dummy_answer_30" xml:space="preserve">
    <value>I don't hear you🙉🤬... nanananana...</value>
  </data>
  <data name="chat_details_dummy_answer_3_img" xml:space="preserve">
    <value>https://images.pexels.com/photos/226597/pexels-photo-226597.jpeg</value>
  </data>
  <data name="chat_details_dummy_answer_4" xml:space="preserve">
    <value>I hate them! 😡
They're sooooo fluffy - to fluffy!</value>
  </data>
  <data name="chat_details_dummy_answer_50_1" xml:space="preserve">
    <value>Selfdestruct initiated</value>
  </data>
  <data name="chat_details_dummy_answer_50_2" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="chat_details_dummy_answer_50_3" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="chat_details_dummy_answer_50_4" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="chat_details_dummy_answer_50_5" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="chat_details_dummy_answer_50_6" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="chat_details_dummy_answer_50_7" xml:space="preserve">
    <value>https://images.pexels.com/photos/73909/nuclear-weapons-test-nuclear-weapon-weapons-test-explosion-73909.jpeg</value>
  </data>
  <data name="chat_details_dummy_answer_7" xml:space="preserve">
    <value>Why are you writing messages to me?</value>
  </data>
  <data name="DonateSettingsPage_bank_details1.Text" xml:space="preserve">
    <value>Because PayPal has rather questionable business practices and takes a large cut of the donation, direct SEPA bank transfers are possible.
So if you have the ability to make SEPA bank transfers at a low cost (for example if you live within the EU) feel free to contact me for my bank details:</value>
  </data>
  <data name="DonateSettingsPage_bank_details2.Text" xml:space="preserve">
    <value>Never the less PayPal donations are still very much appreciated!</value>
  </data>
  <data name="error_text" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="invalid_jabber_id_text" xml:space="preserve">
    <value>Invalid Jabber-ID!</value>
  </data>
  <data name="invalid_port_text" xml:space="preserve">
    <value>Invalid server port!</value>
  </data>
  <data name="invalid_resource_text" xml:space="preserve">
    <value>Invalid resource name!</value>
  </data>
  <data name="invalid_server_text" xml:space="preserve">
    <value>Invalid server addresse!</value>
  </data>
  <data name="whats_new_markdown.Text" xml:space="preserve">
    <value># v.0.9.0.0 [September 2018] OMEMO?!

I've invested **a lot** of time and effort into UWPX this month and basically almost all of it went into OMEMO support. So here is what I've archived:

* OMEMO key generation and publishing should be ready to go
* Establishing OMEMO sessions is done
* Managing OMEMO sessions is almost done
* Message encryption is theoretically done. There is just one bug to fix left (more on this later)
* Message decryption is also theoretically done (same bug like message encryption)
* Key management ~20% done (trust/untrust devices)
* Fingerprint validation is ~45% done. You can already view your own fingerprint as a QR-Code but scanning other ones is still on the to do list.
* The OMEMO UI controls are about ~40% done

For more up to date information on the state of OMEMO please visit: [#5](https://github.com/UWPX/UWPX-Client/issues/5)

So now to the before mentioned bug that prevents me from encrypting and decrypting messages:
Something with the actual encryption process is wrong. Other clients like Gajim and Conversations don't seem to be able to decrypt my messages. 
_I think_ this is caused by a faulty AES 128 GCM implementation on my side. 
So if you know a good source for a valid C# implementation of the AES 128 GCM algorithm or are able to help me validate my implementation (click [here](https://github.com/UWPX/UWPX-Client/blob/master/XMPP_API/Classes/Crypto/Aes128Gcm.cs) for the implementation) you are more then welcome! 
Just contact me via XMPP ([com8@xmpp.uwpx.org](xmpp:com8@xmpp.uwpx.org)), email (support@uwpx.org) or by posting your solution in the OMEMO issue [#5](https://github.com/UWPX/UWPX-Client/issues/5).

Besides OMEMO I've also added SCRAM-SHA-1 support for authentication, added support for inline URLs, phone numbers and email addresses in chat messages and much more... 

**A small note:**

I will probably be unable to invest a lot of time into UWPX development for the next two months (September, October) because I have to do an internship and write a bunch of exams in the upcoming two months at my university.
Never the less I will **try** to allocate some time to fix bugs!

**Please report bugs [here](https://github.com/UWPX/UWPX-Client/issues)!**

### Known bugs:
* MUC nickname changing not working [#29](https://github.com/UWPX/UWPX-Client/issues/29) 
* Not receiving offline messages [#27](https://github.com/UWPX/UWPX-Client/issues/27) 
* MUC subject changing leads to an account disconnect [#34](https://github.com/UWPX/UWPX-Client/issues/34) 

### Changes:
* Added [XEP-0280 (Message Carbons)](https://xmpp.org/extensions/xep-0280.html) support. It will show a small copy if the message is a CC
* Added [XEP-0384 (OMEMO Encryption)](https://xmpp.org/extensions/xep-0384.html) key announcement support
* Added [XEP-0163 (Personal Eventing Protocol)](https://xmpp.org/extensions/xep-0163.html) support
* Added [XEP-0334 (Message Processing Hints)](https://xmpp.org/extensions/xep-0334.html) support
* Added an animation for rescaling the settings page
* Added email, phone number and URL detection in chat messages
* Added toast notifications for incoming messages **if the app is running**
* Improved DB performance
* General UI improvements
* Ignoring own presence broadcast - prevents setting you as unavailable
* Fixed adding empty bookmark fields
* Fixed changing the presence locking up the UI
* Fixed MUC joining sends empty password field if no password is required
* Fixed a cause for an account reconnecting loop
* Fixed one memory leak
* Fixed headline message chats getting registered as MUCs
* Fixed chats not staying in focus if the order changes

[Click to view on GitHub](https://github.com/UWPX/UWPX-Client/releases/tag/v.0.9.0.0)</value>
  </data>
</root>