# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

# Disable all commit triggers:
trigger: none

# Disable PR triggers:
pr: none

pool:
  vmImage: 'windows-2019'

variables:
  Build.Uwpx.Solution: 'UWPX-Client.sln'
  Build.Uwpx.BuildConfiguration: 'Debug'
  Build.Uwpx.BuildPlatform: 'x86'
  Build.Uwpx.AppxPackageDir: '$(Build.ArtifactStagingDirectory)\AppxPackages\\'

  Build.Installer.Project: 'UWPX-Installer/UWPX-Installer/UWPX-Installer.csproj'
  Build.Installer.BuildConfiguration: 'Debug'
  Build.Installer.OutDir: '$(Build.ArtifactStagingDirectory)\Installer\\'


  Build.ArtifactName: 'UWPX-$(Build.Uwpx.BuildConfiguration)'

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: NuGetCommand@2
  displayName: 'NuGet Restore'
  inputs:
    restoreSolution: '$(Build.Uwpx.Solution)'

- task: DownloadSecureFile@1
  name: 'signingCert'
  displayName: 'Download Signing Certificate'
  inputs:
    secureFile: 'UWPX_UI_TemporaryKey.pfx'

- task: VSBuild@1
  displayName: 'Build UWPX for $(Build.Uwpx.BuildPlatform) $(Build.Uwpx.BuildConfiguration)'
  inputs:
    solution: '$(Build.Uwpx.Solution)'
    vsVersion: '16.0'
    msbuildArgs: '/p:AppxBundlePlatforms="$(Build.Uwpx.BuildPlatform)"
                  /p:AppxPackageDir="$(Build.Uwpx.AppxPackageDir)"
                  /p:AppxBundle=Always
                  /p:UapAppxPackageBuildMode=SideloadOnly
                  /p:AppxPackageSigningEnabled=true
                  /p:PackageCertificateThumbprint="" 
                  /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"
                  /t:Packaging'
    platform: '$(Build.Uwpx.BuildPlatform)'
    configuration: '$(Build.Uwpx.BuildConfiguration)'

# Installer:
- task: PowerShell@2
  displayName: 'Clone UWPX Installer'
  inputs:
    targetType: 'inline'
    script: 'git clone https://github.com/UWPX/UWPX-Installer.git'

- task: PowerShell@2
  displayName: 'Setup Installer Resources'
  inputs:
    filePath: '.azure-pipelines\scripts\Setup_Installer_Resources.ps1'
    arguments: '"$(Build.Uwpx.AppxPackageDir)" "UWPX-Installer\UWPX-Installer\Resources"'

- task: UseDotNet@2
  displayName: 'Set .net Core SDK to 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '$(Build.Installer.Project)'
    feedsToUse: 'select'

# https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore21
- task: DotNetCoreCLI@2
  displayName: 'Build and Publish the UWPX Installer for x86'
  inputs:
    command: publish
    projects: '$(Build.Installer.Project)'
    publishWebProjects: False
    arguments: '--configuration $(Build.Installer.BuildConfiguration) --framework netcoreapp3.1 --self-contained --runtime win-x86 --output $(Build.Installer.OutDir)/x86'
    zipAfterPublish: False

- task: DotNetCoreCLI@2
  displayName: 'Build and Publish the UWPX Installer for x64'
  inputs:
    command: publish
    projects: '$(Build.Installer.Project)'
    publishWebProjects: False
    arguments: '--configuration $(Build.Installer.BuildConfiguration) --framework netcoreapp3.1 --self-contained --runtime win-x64 --output $(Build.Installer.OutDir)/x64'
    zipAfterPublish: False

- task: PowerShell@2
  displayName: 'Copy Result'
  inputs:
    targetType: 'inline'
    script: |
      Copy-Item "$(Build.Installer.OutDir)/x64\UWPX-Installer.exe" "$(Build.ArtifactStagingDirectory)\UWPX-Installer-x64.exe"
      Copy-Item "$(Build.Installer.OutDir)/x86\UWPX-Installer.exe" "$(Build.ArtifactStagingDirectory)\UWPX-Installer-x86.exe"
      # Remove-Item -Recurse $(Build.Installer.OutDir)
      # Remove-Item -Recurse $(Build.Uwpx.AppxPackageDir)

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.ArtifactName)'
